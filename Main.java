package com.main;import javax.swing.*;import javax.swing.table.DefaultTableModel;import java.awt.*;import java.awt.event.*;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.sql.*;import java.util.HashMap;import java.util.Objects;import java.util.regex.Matcher;import java.util.regex.Pattern;public class Main {    static Connection conn = null;    static final HashMap<String, String[]> table = new HashMap<>();    static final HashMap<String, String> text = new HashMap<>();    static final HashMap<String, String[]> table_attr = new HashMap<>();    static final HashMap<String, String[]> doctorMap = new HashMap<>();    static final HashMap<String, int[]> wardMap = new HashMap<>();    static final HashMap<String, String[]> table_name = new HashMap<>();    static {        wardMap.put("wid", new int[]{101, 102, 103, 201, 202, 203, 301, 302, 303, 401, 402, 403, 501, 502, 503, 601, 602, 603});        doctorMap.put("depart", new String[]{"脑科", "心脏科", "骨科", "牙科", "外科", "妇女科", "儿童科", "神经科"});        doctorMap.put("job", new String[]{"住院医师", "主治医师", "副主任医师", "主任医师", "科副主任", "科主任", "副院长", "院长"}); // ,"科副主任","科主任","副院长","院长"        table.put("管理员", new String[]{"doctor", "patient", "patient_in", "patient_out", "ward"});        table.put("doctor", new String[]{"patient", "patient_in", "patient_out"});        text.put("管理员", "./sa.help");        text.put("doctor", "./doctor.help");        table_attr.put("doctor", new String[]{"did", "dname", "depart", "job"});        table_attr.put("patient", new String[]{"pid", "pname", "sex", "age", "dname", "did"});        table_attr.put("patient_in", new String[]{"pid", "pname", "wid", "wbid", "spantime", "startdate"});        table_attr.put("patient_out", new String[]{"pid", "sex", "pname", "age", "outdate", "stuation"});        table_attr.put("ward", new String[]{"wid", "wbid", "wstat", "wclass"});        table_name.put("doctor",new String[]{"工号","姓名","科室","职务","备注"});        table_name.put("patient",new String[]{"病例号","姓名","性别","年龄","症状","诊断","诊治医生姓名","诊治医生工号","住院状态"});        table_name.put("patient_in",new String[]{"病例号","姓名","病房号","病床号","持续时间/天","入住日期"});        table_name.put("patient_out",new String[]{"病例号","性别","姓名","年龄","出院日期","出院时病情"});        table_name.put("ward",new String[]{"病房号","病床号","床位状态","床位属性","备注"});    }    public static void Main_Menu() {        //登录界面        JFrame jfLogin = new JFrame("用户登录");        JPanel jpLogin = new JPanel();        JLabel user_name = new JLabel("用户名");        JLabel user_psd = new JLabel("密  码");        JTextField user_name_text = new JTextField();        JPasswordField user_psd_text = new JPasswordField();        JButton button = new JButton("登录");        JButton exitButton = new JButton("退出");        jfLogin.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        jfLogin.setVisible(true);        jfLogin.setSize(250, 300);        jfLogin.setLocationRelativeTo(null);        jfLogin.add(jpLogin);        user_name.setBounds(8, 60, 100, 50);        user_psd.setBounds(8, 90, 100, 50);        user_name_text.setBounds(50, 75, 150, 20);        user_psd_text.setBounds(50, 105, 150, 20);        button.setBounds(20, 150, 80, 25);        exitButton.setBounds(130, 150, 80, 25);        jpLogin.setLayout(null);        jpLogin.add(user_name);        jpLogin.add(user_psd);        jpLogin.add(user_name_text);        jpLogin.add(user_psd_text);        jpLogin.add(button);        jpLogin.add(exitButton);        user_psd_text.addKeyListener(new KeyAdapter() {            @Override            public void keyPressed(KeyEvent e) {                if (e.getKeyCode() == KeyEvent.VK_ENTER) {                    String username = user_name_text.getText();                    if (LoginMatch(username, new String(user_psd_text.getPassword()))) {                        jfLogin.dispose();                        System.out.println("connect database success");                        User_Menu(username);                    }                }            }        });        //登录按钮事件监听，登录成功跳转到User_Menu        button.addActionListener(e -> {            String username = user_name_text.getText();            if (LoginMatch(username, new String(user_psd_text.getPassword()))) {                jfLogin.dispose();                System.out.println("connect database success");                User_Menu(username);            }        });        //退出按钮监听        exitButton.addActionListener(e -> {            jfLogin.dispose();            System.exit(0);        });    }    public static JPanel jp_format() {        JPanel jp = new JPanel();        jp.setLayout(null);        jp.setBounds(200, 0, 500, 600);        return jp;    }    private static void changeFlavor(String command, JFrame jf) {        try {            switch (command) {                case "Metal 风格":                    UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");                    break;                case "Nimbus 风格":                    UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");                    break;                case "Windows 风格":                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");                    break;                case "Windows 经典风格":                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");                    break;                case "Motif 风格":                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");                    break;                case "Mac 风格":                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.mac.MacLookAndFeel");                    break;                case "GTK 风格":                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");                    break;            }            SwingUtilities.updateComponentTreeUI(jf.getContentPane());        } catch (Exception e) {            e.printStackTrace();        }    }    private static JPopupMenu addPopupMenuForFlavor(JFrame jf) {        //风格设置        //声明右键菜单        JPopupMenu jPopupMenu = new JPopupMenu();        ButtonGroup poupButtonBg = new ButtonGroup();        JRadioButtonMenuItem metalItem = new JRadioButtonMenuItem("Metal 风格");        JRadioButtonMenuItem nimbusItem = new JRadioButtonMenuItem("Nimbus 风格");        JRadioButtonMenuItem windowsItem = new JRadioButtonMenuItem("Windows 风格",true);        JRadioButtonMenuItem windowsClassicItem = new JRadioButtonMenuItem("Windows 经典风格");        JRadioButtonMenuItem motifItem = new JRadioButtonMenuItem("Motif 风格");        JRadioButtonMenuItem macItem = new JRadioButtonMenuItem("Mac 风格");        JRadioButtonMenuItem gtkItem = new JRadioButtonMenuItem("GTK 风格");        //组装右键菜单        poupButtonBg.add(metalItem);        poupButtonBg.add(nimbusItem);        poupButtonBg.add(windowsItem);        poupButtonBg.add(windowsClassicItem);        poupButtonBg.add(motifItem);        poupButtonBg.add(macItem);        poupButtonBg.add(gtkItem);        ActionListener listener = e -> {            //当前选择的是哪一个风格            String actionCommand = e.getActionCommand();            try {                changeFlavor(actionCommand, jf);            } catch (Exception ex) {                ex.printStackTrace();            }        };        metalItem.addActionListener(listener);        nimbusItem.addActionListener(listener);        windowsItem.addActionListener(listener);        windowsClassicItem.addActionListener(listener);        motifItem.addActionListener(listener);        macItem.addActionListener(listener);        gtkItem.addActionListener(listener);        jPopupMenu.add(metalItem);        jPopupMenu.add(nimbusItem);        jPopupMenu.add(windowsItem);        jPopupMenu.add(windowsClassicItem);        jPopupMenu.add(motifItem);        jPopupMenu.add(macItem);        jPopupMenu.add(gtkItem);        return jPopupMenu;    }    private static void User_Menu(String username) {        String key;        JFrame jf = new JFrame("用户界面");        //定义默认风格为Nimbus        changeFlavor("Nimbus 风格", jf);        JPanel catalog = new JPanel();        catalog.setLayout(null);        catalog.setBounds(0, 0, 200, 560);        catalog.setBorder(BorderFactory.createLineBorder(new Color(94, 152, 255), 2));        JPanel cards = new JPanel(new CardLayout());        JPanel jp_help = jp_format();        JPanel jp_data = jp_format();        JPanel jp_init = jp_format();        cards.add(jp_help, "help");        cards.add(jp_data, "data");        cards.add(jp_init, "initial");        CardLayout c = (CardLayout) cards.getLayout();        JComboBox<String> type = new JComboBox<>();        //根据登录的账号判断是管理员还是医生        if (username.length() > 6) {            key = "doctor";        } else {            key = "管理员";        }        //通过哈希表将不同用户所管理的实体加入下划框        for (String s : table.get(key)) {            type.addItem(s);        }        select_window(type, jp_data, jf);        c.show(cards, "data");        jf.repaint();        //设置目录的组件布局        type.setBounds(2, 2, 128, 20);        JButton help = new JButton("help");        help.setBounds(130, 2, 68, 20);        JButton add = new JButton("增加数据");        add.setBounds(50, 100, 100, 50);        JButton del = new JButton("删除数据");        del.setBounds(50, 200, 100, 50);        JButton alter = new JButton("修改数据");        alter.setBounds(50, 300, 100, 50);        JButton select = new JButton("查找数据");        select.setBounds(50, 400, 100, 50);        JButton ret = new JButton("退出登录");        ret.setBounds(100, 530, 100, 30);        catalog.add(ret);        catalog.add(type);        catalog.add(help);        catalog.add(add);        catalog.add(del);        catalog.add(alter);        catalog.add(select);//        initial(jp_init);        JLabel pic = new JLabel(new ImageIcon("./src/left.jpg"));        pic.setBounds(2, 2, 196, 598);        catalog.add(pic);//        c.show(cards, "initial");        jf.add(catalog);        jf.add(cards);        //给面板添加右键按钮，用以切换风格        catalog.setComponentPopupMenu(addPopupMenuForFlavor(jf));        cards.setComponentPopupMenu(addPopupMenuForFlavor(jf));        jf.setSize(915, 600);        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        jf.setLocationRelativeTo(null);        jf.setVisible(true);//        jf.repaint(200, 0, 700, 600);        //设置各个按钮的监听        type.addItemListener(e -> {            if (e.getStateChange() == ItemEvent.SELECTED) {                select_window(type, jp_data, jf);                c.show(cards, "data");                jf.repaint();            }        });        help.addActionListener(e -> {            help_window(jp_help, key);            c.show(cards, "help");            jf.repaint();        });        add.addActionListener(e -> {            add_window(type);            c.show(cards, "data");            jf.repaint();        });        del.addActionListener(e -> {            del_window(type, jp_data, jf);            c.show(cards, "data");            jf.repaint();        });        alter.addActionListener(e -> {            alter_window(type, jp_data, jf);            c.show(cards, "data");            jf.repaint();        });        select.addActionListener(e -> {            select_window(type, jp_data, jf);            c.show(cards, "data");            jf.repaint();        });        ret.addActionListener(e->{            jf.dispose();            JOptionPane.showMessageDialog(null,"退出成功!");            Main_Menu();        });    }////    private static void initial(JPanel jp_init) {//        ImageIcon img = new ImageIcon("D:\\b.jpg");//        JLabel label = new JLabel(img);//        label.setBounds(200, 0, 700, 600);//        jp_init.add(label);//    }    public static void del_window(JComboBox<String> type, JPanel jp, JFrame jframe) {        jp.removeAll();        jp.repaint();        jp.revalidate();        display(type, jp, jframe);    }    public static void alter_window(JComboBox<String> type, JPanel jp, JFrame jf) {        jp.removeAll();        jp.repaint();        jp.revalidate();        String table_name = (String) type.getSelectedItem();        JScrollPane data = new JScrollPane();        JButton select = new JButton("定位");        JButton empty = new JButton("重置");        JButton alterButton = new JButton("修改");        JTextField parm = new JTextField();        JComboBox<String> attr = new JComboBox<>();        for (String s : table_attr.get(table_name)) {            attr.addItem(s);        }        attr.setBounds(200, 0, 100, 25);        parm.setBounds(300, 0, 375, 25);        select.setBounds(675, 0, 75, 27);        empty.setBounds(750, 0, 75, 25);        alterButton.setBounds(825, 0, 75, 25);        data.setBounds(200, 25, 700, 575);        data.setViewportView(getdata(table_name));        data.setBorder(BorderFactory.createLineBorder(new Color(0x5E98FF), 2));        /* 通过表名填写attr和data */        jp.add(empty);        jp.add(attr);        jp.add(parm);        jp.add(select);        jp.add(alterButton);        jp.add(data);        select.addActionListener(e -> {//            data.setViewportView(select_according_attr(table_name, (String) (attr.getSelectedItem()), parm.getText()));//            jp.repaint();//            jf.repaint();            refreshDataWhenAlter(data, table_name, jp, jf, (String) (attr.getSelectedItem()), parm.getText());        });        empty.addActionListener(e -> {            refreshData(data, table_name, jp, jf);            parm.setText("");        });        alterButton.addActionListener(e -> {            assert table_name != null;            switch (table_name) {                case "doctor":                    alterDoctor((JTable) data.getViewport().getView(), data, table_name, jp, jf, (String) (attr.getSelectedItem()), parm.getText());                    break;                case "ward":                    alterWard((JTable) data.getViewport().getView(), data, table_name, jp, jf, (String) (attr.getSelectedItem()), parm.getText());                    break;                case "patient":                    alterPatient((JTable) data.getViewport().getView(), data, table_name, jp, jf, (String) (attr.getSelectedItem()), parm.getText());                    break;                case "patient_in":                    alterPatientIn((JTable) data.getViewport().getView(), data, table_name, jp, jf, (String) (attr.getSelectedItem()), parm.getText());                    break;                case "patient_out":                    alterPatientOut((JTable) data.getViewport().getView(), data, table_name, jp, jf, (String) (attr.getSelectedItem()), parm.getText());                    break;                default:                    break;            }        });    }    private static void refreshData(JScrollPane data, String tableName, JPanel jp, JFrame jf) {        data.setViewportView(getdata(tableName));        jp.repaint();        jf.repaint();    }    private static void refreshDataWhenAlter(JScrollPane data, String tableName, JPanel jp,                                             JFrame jf, String attr, String parm) {        data.setViewportView(select_according_attr(tableName, attr, parm));        jp.repaint();        jf.repaint();    }    private static void alterDoctor(JTable jt, JScrollPane dataPane, String tableName, JPanel jPanel, JFrame jFrame, String attr, String parm) {        int row = jt.getSelectedRow();        if (row == -1) {            JOptionPane.showMessageDialog(null, "请先选中一行后再点击修改按钮");        } else {            String[] jtSelected = {jt.getValueAt(row, 0).toString().trim(), jt.getValueAt(row, 1).toString().trim(),                    jt.getValueAt(row, 2).toString().trim(), jt.getValueAt(row, 3).toString().trim(),                    jt.getValueAt(row, 4).toString().trim()};            JFrame jf = new JFrame("请修改您选中的信息");            JPanel jp = new JPanel();            JButton jbAlter = new JButton("修改");            JButton jbCancel = new JButton("取消");            JTextField jtDid = new JTextField(jtSelected[0]);            JTextField jtDname = new JTextField(jtSelected[1]);            JComboBox<String> jcbDep = new JComboBox<>();            JComboBox<String> jcbJob = new JComboBox<>();            JTextField jtText = new JTextField(jtSelected[4]);            JLabel jl = new JLabel();            jf.setVisible(true);            jf.setSize(700, 150);            jf.setLocationRelativeTo(null);            jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);            jf.setAlwaysOnTop(true);            jtDid.setEnabled(false);            jp.setLayout(new GridLayout(4, 5, 5, 5));            jcbJob.addItem(jtSelected[3]);            for (String string : doctorMap.get("job")) {                jcbJob.addItem(string);            }            jcbDep.addItem(jtSelected[2]);            for (String string : doctorMap.get("depart")) {                jcbDep.addItem(string);            }            jp.add(new JLabel("工号："));            jp.add(new JLabel("姓名："));            jp.add(new JLabel("科室："));            jp.add(new JLabel("职务："));            jp.add(new JLabel("备注："));            jp.add(jtDid);            jp.add(jtDname);            jp.add(jcbDep);            jp.add(jcbJob);            jp.add(jtText);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(jl);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(jbAlter);            jp.add(new JLabel());            jp.add(jbCancel);            jf.add(jp);            jbAlter.addActionListener(ev -> {                if (jtDname.getText().trim().length() == 0) {                    jl.setText("姓名不能为空！");                    jl.setForeground(Color.RED);                } else {                    try {                        String update = "update doctor set dname = '" + jtDname.getText().trim() + "',depart = '"                                + jcbDep.getSelectedItem() + "',job = '" + jcbJob.getSelectedItem() + "',dtext = '"                                + jtText.getText().trim() + "' where did = '" + jtSelected[0] + "'";                        PreparedStatement ppst = conn.prepareStatement(update);                        ppst.executeUpdate();                        ppst.close();                        JOptionPane.showMessageDialog(jf, "医生\"" + jtDname.getText().trim() + "\"的信息更新成功！", "提示",                                JOptionPane.PLAIN_MESSAGE);                        jf.dispose();                    } catch (Exception er) {                        JOptionPane.showMessageDialog(null, "操作有误！" + er);                    }                }                refreshDataWhenAlter(dataPane, tableName, jPanel, jFrame, attr, parm);            });            jbCancel.addActionListener(ev -> jf.dispose());        }    }    private static void alterPatient(JTable jt, JScrollPane dataPane, String tableName, JPanel jPanel, JFrame jFrame, String attr, String parm) {        int row = jt.getSelectedRow();        if (row == -1) {            JOptionPane.showMessageDialog(null, "请先选中一行后再点击修改按钮");        } else {            String[] jtSelected = {jt.getValueAt(row, 0).toString().trim(), jt.getValueAt(row, 1).toString().trim(),                    jt.getValueAt(row, 2).toString().trim(), jt.getValueAt(row, 3).toString().trim(),                    jt.getValueAt(row, 4).toString().trim(), jt.getValueAt(row, 5).toString().trim(),                    jt.getValueAt(row, 6).toString().trim(), jt.getValueAt(row, 7).toString().trim(),                    jt.getValueAt(row, 8).toString().trim()};//			int age = Integer.valueOf(jt.getValueAt(row, 3).toString().trim());            JFrame jf = new JFrame("请修改您选中的信息");            JPanel jp = new JPanel();            JButton jbAlter = new JButton("修改");            JButton jbCancel = new JButton("取消");            JTextField jtPid = new JTextField(jtSelected[0]);            JTextField jtPname = new JTextField(jtSelected[1]);            JTextField jtAge = new JTextField(jtSelected[3]);            JTextField jtSymp = new JTextField(jtSelected[4]);            JTextField jtDiag = new JTextField(jtSelected[5]);            JTextField jtDid = new JTextField(jtSelected[6]);            JTextField jtDname = new JTextField(jtSelected[7]);            JComboBox<String> jcSex = new JComboBox<>();            JComboBox<String> jcStat = new JComboBox<>();            JLabel jl = new JLabel();            jf.setVisible(true);            jf.setSize(800, 400);            jf.setLocationRelativeTo(null);            jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);            jf.setAlwaysOnTop(true);            jp.setLayout(new GridLayout(11, 2, 5, 5));            jcSex.addItem(jtSelected[2]);            jcSex.addItem("男");            jcSex.addItem("女");            jcStat.addItem(jtSelected[8]);            jcStat.addItem("ICU");            jcStat.addItem("Normal");            // 顺序添加组件            jp.add(new JLabel("病例号："));            jp.add(jtPid);            jtPid.setEnabled(false);            jp.add(new JLabel("姓名："));            jp.add(jtPname);            jp.add(new JLabel("性别："));            jp.add(jcSex);            jp.add(new JLabel("年龄："));            jp.add(jtAge);            jp.add(new JLabel("病状："));            jp.add(jtSymp);            jp.add(new JLabel("诊断："));            jp.add(jtDiag);            jp.add(new JLabel("诊治医生工号："));            jp.add(jtDid);            jp.add(new JLabel("诊治医生姓名："));            jp.add(jtDname);            jp.add(new JLabel("住院状态："));            jp.add(jcStat);            jp.add(new JLabel());            jp.add(jl);            jp.add(jbAlter);            jp.add(jbCancel);            jf.add(jp);            jbAlter.addActionListener(ev -> {                String dname = jtDname.getText().trim();                int age = Integer.parseInt(jt.getValueAt(row, 3).toString().trim());                if (jtDname.getText().trim().length() == 0) {                    dname = " ";                    jl.setText("医生姓名未填写");                    jl.setForeground(Color.RED);                }                if (jtAge.getText().trim().length() != 0) {                    try {                        age = Integer.parseInt(jtAge.getText().trim());                    } catch (Exception e) {                        JOptionPane.showMessageDialog(jf, "病人年龄只能为整数！\n自动修改为原先的年龄：" + age, "插入错误",                                JOptionPane.ERROR_MESSAGE);                    }                }                if (jtPname.getText().trim().length() == 0) {                    jl.setText("病人姓名不能为空！");                    jl.setForeground(Color.RED);                } else if (jtDid.getText().trim().length() == 0) {                    jl.setText("医生工号不能为空！");                    jl.setForeground(Color.RED);                } else {                    try {                        String update = "update patient set " + "pname = '" + jtPname.getText().trim() + "',sex = '"                                + jcSex.getSelectedItem() + "',age = " + age + ",symp = '" + jtSymp.getText().trim()                                + "',diag = '" + jtDiag.getText().trim() + "',did = '" + jtDid.getText().trim()                                + "',dname = '" + dname + "',stat = '" + jcStat.getSelectedItem()                                + "' where pid = '" + jtSelected[0] + "'";                        PreparedStatement ppst = conn.prepareStatement(update);                        ppst.executeUpdate();                        ppst.close();                        JOptionPane.showMessageDialog(jf, "病人\"" + jtPname.getText().trim() + "\"的信息更新成功！", "提示",                                JOptionPane.PLAIN_MESSAGE);                        jf.dispose();                    } catch (Exception er) {                        JOptionPane.showMessageDialog(null, "操作有误！" + er);                    }                }                refreshDataWhenAlter(dataPane, tableName, jPanel, jFrame, attr, parm);            });            jbCancel.addActionListener(ev -> jf.dispose());        }    }    private static void alterWard(JTable jt, JScrollPane dataPane, String tableName, JPanel jPanel, JFrame jFrame, String attr, String parm) {        int row = jt.getSelectedRow();        if (row == -1) {            JOptionPane.showMessageDialog(null, "请先选中一行后再点击修改按钮");        } else {            String[] jtSelected = {jt.getValueAt(row, 0).toString().trim(), jt.getValueAt(row, 1).toString().trim(),                    jt.getValueAt(row, 2).toString().trim(), jt.getValueAt(row, 3).toString().trim(),                    jt.getValueAt(row, 4).toString().trim()};            JFrame jf = new JFrame("请修改您选中的信息");            JPanel jp = new JPanel();            JButton jbAlter = new JButton("修改");            JButton jbCancel = new JButton("取消");            JComboBox<String> jcWid = new JComboBox<>();            JTextField jtWbid = new JTextField(jtSelected[1]);            JComboBox<String> jcWstat = new JComboBox<>();            JTextField jtWtext = new JTextField(jtSelected[3]);            JComboBox<String> jcWclass = new JComboBox<>();            JLabel jl = new JLabel();            jf.setVisible(true);            jf.setSize(700, 150);            jf.setLocationRelativeTo(null);            jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);            jf.setAlwaysOnTop(true);            jcWid.setEnabled(false);            jtWbid.setEnabled(false);            jp.setLayout(new GridLayout(4, 5, 5, 5));            jcWid.addItem(jtSelected[0]);            jcWstat.addItem(jtSelected[2]);            jcWstat.addItem("空");            jcWstat.addItem("非空");            jcWclass.addItem(jtSelected[4]);            jcWclass.addItem("ICU");            jcWclass.addItem("Normal");            jp.add(new JLabel("病房号："));            jp.add(new JLabel("病床号："));            jp.add(new JLabel("床位状态："));            jp.add(new JLabel("备注："));            jp.add(new JLabel("床位类型："));            jp.add(jcWid);            jp.add(jtWbid);            jp.add(jcWstat);            jp.add(jtWtext);            jp.add(jcWclass);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(jl);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(jbAlter);            jp.add(new JLabel());            jp.add(jbCancel);            jf.add(jp);            jbAlter.addActionListener(ev -> {                String text = jtWtext.getText().trim();                if (text.length() == 0) {                    text = "无";                }                try {                    String update = "update ward set wstat = '" + jcWstat.getSelectedItem() + "',wtext = '" + text                            + "',wclass = '" + jcWclass.getSelectedItem() + "' where wid = " + jtSelected[0]                            + " and wbid = " + jtSelected[1];                    PreparedStatement ppst = conn.prepareStatement(update);                    ppst.executeUpdate();                    ppst.close();                    JOptionPane.showMessageDialog(jf, "病床\"" + jtSelected[0] + jtSelected[1] + "\"的信息更新成功！", "提示",                            JOptionPane.PLAIN_MESSAGE);                    jf.dispose();                } catch (Exception er) {                    JOptionPane.showMessageDialog(null, "操作有误！" + er);                }                refreshDataWhenAlter(dataPane, tableName, jPanel, jFrame, attr, parm);            });            jbCancel.addActionListener(ev -> jf.dispose());        }    }    private static void alterPatientIn(JTable jt, JScrollPane dataPane, String tableName, JPanel jPanel, JFrame jFrame, String attr, String parm) {        int row = jt.getSelectedRow();        if (row == -1) {            JOptionPane.showMessageDialog(null, "请先选中一行后再点击修改按钮");        } else {            String[] jtSelected = {jt.getValueAt(row, 0).toString().trim(), jt.getValueAt(row, 1).toString().trim(),                    jt.getValueAt(row, 2).toString().trim(), jt.getValueAt(row, 3).toString().trim(),                    jt.getValueAt(row, 4).toString().trim(), jt.getValueAt(row, 5).toString().trim()};//			int age = Integer.valueOf(jt.getValueAt(row, 3).toString().trim());            JFrame jf = new JFrame("请修改您选中的信息");            JPanel jp = new JPanel();            JButton jbAlter = new JButton("修改");            JButton jbCancel = new JButton("取消");            JTextField jtPid = new JTextField(jtSelected[0]);            JTextField jtPname = new JTextField(jtSelected[1]);            JComboBox<String> jcWid = new JComboBox<>();            JTextField jtWbid = new JTextField(jtSelected[3]);            JTextField jtSpantime = new JTextField(jtSelected[4]);            JTextField jtStartdate = new JTextField(jtSelected[5]);            JLabel jl = new JLabel();            jf.setVisible(true);            jf.setSize(800, 150);            jf.setLocationRelativeTo(null);            jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);            jf.setAlwaysOnTop(true);            jp.setLayout(new GridLayout(4, 6, 5, 5));            jcWid.addItem(jtSelected[2]);            for (int wid : wardMap.get("wid")) {                jcWid.addItem(String.valueOf(wid));            }            // 顺序添加组件            jp.add(new JLabel("病例号："));            jp.add(new JLabel("姓名："));            jp.add(new JLabel("病房号："));            jp.add(new JLabel("病床号："));            jp.add(new JLabel("住院时长："));            jp.add(new JLabel("入住日期："));            jp.add(jtPid);            jtPid.setEnabled(false);            jp.add(jtPname);            jp.add(jcWid);            jp.add(jtWbid);            jp.add(jtSpantime);            jp.add(jtStartdate);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel("注意："));            jp.add(jl);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(jbAlter);            jp.add(jbCancel);            jp.add(new JLabel());            jp.add(new JLabel());            jf.add(jp);            jbAlter.addActionListener(ev -> {                String startdate = jtStartdate.getText().trim();                Pattern p = Pattern.compile("^[1-9][0-9]{3}-[0-9]{2}-[0-9]{2}$", Pattern.CASE_INSENSITIVE);                Pattern p2 = Pattern.compile("^[1-9][0-9]{7}$", Pattern.CASE_INSENSITIVE);                Matcher m = p.matcher(startdate);                Matcher m2 = p2.matcher(startdate);                if (jtPname.getText().trim().length() == 0) {                    jl.setText("病人姓名不能为空！");                    jl.setForeground(Color.RED);                } else if (jtWbid.getText().trim().length() == 0) {                    jl.setText("病床号不能为空！");                    jl.setForeground(Color.RED);                } else if (jtSpantime.getText().trim().length() == 0) {                    jl.setText("住院时长不能为空！");                    jl.setForeground(Color.RED);                } else if (startdate.length() == 0) {                    jl.setText("住院日期不能为空！");                    jl.setForeground(Color.RED);                } else if (!m.find() && !m2.find()) {                    JOptionPane.showMessageDialog(jf, "入住日期格式出错，正确格式应类似2021-12-12或者20211212", "输入错误",                            JOptionPane.ERROR_MESSAGE);                    jl.setText("住院日期格式出错");                    jl.setForeground(Color.RED);                } else {                    try {                        String update = "update patient_in set " + "pname = '" + jtPname.getText().trim()                                + "',wid = " + jcWid.getSelectedItem() + ",wbid = " + jtWbid.getText().trim()                                + ",spantime = '" + jtSpantime.getText().trim() + "',startdate = '" + startdate                                + "' where pid = '" + jtSelected[0] + "'";                        PreparedStatement ppst = conn.prepareStatement(update);                        ppst.executeUpdate();                        ppst.close();                        JOptionPane.showMessageDialog(jf, "病人\"" + jtSelected[0] + "\"的住院信息更新成功！", "提示",                                JOptionPane.PLAIN_MESSAGE);                        jf.dispose();                    } catch (Exception er) {                        JOptionPane.showMessageDialog(null, "床位冲突！\n" + er);                    }                }                refreshDataWhenAlter(dataPane, tableName, jPanel, jFrame, attr, parm);            });            jbCancel.addActionListener(e -> jf.dispose());        }    }    private static void alterPatientOut(JTable jt, JScrollPane dataPane, String tableName, JPanel jPanel, JFrame jFrame, String attr, String parm) {        int row = jt.getSelectedRow();        if (row == -1) {            JOptionPane.showMessageDialog(null, "请先选中一行后再点击修改按钮");        } else {            String[] jtSelected = {jt.getValueAt(row, 0).toString().trim(), jt.getValueAt(row, 1).toString().trim(),                    jt.getValueAt(row, 2).toString().trim(), jt.getValueAt(row, 3).toString().trim(),                    jt.getValueAt(row, 4).toString().trim(), jt.getValueAt(row, 5).toString().trim()};//			int age = Integer.valueOf(jt.getValueAt(row, 3).toString().trim());            JFrame jf = new JFrame("请修改您选中的信息");            JPanel jp = new JPanel();            JButton jbAlter = new JButton("修改");            JButton jbCancel = new JButton("取消");            JTextField jtPid = new JTextField(jtSelected[0]);            JTextField jtPname = new JTextField(jtSelected[1]);            JTextField jtAge = new JTextField(jtSelected[3]);            JTextField jtOutdate = new JTextField(jtSelected[4]);            JTextField jtSituation = new JTextField(jtSelected[5]);            JComboBox<String> jcSex = new JComboBox<>();            JLabel jl = new JLabel();            jf.setVisible(true);            jf.setSize(800, 150);            jf.setLocationRelativeTo(null);            jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);            jf.setAlwaysOnTop(true);            jp.setLayout(new GridLayout(4, 6, 5, 5));            jcSex.addItem(jtSelected[2]);            jcSex.addItem("男");            jcSex.addItem("女");            // 顺序添加组件            jp.add(new JLabel("病例号："));            jp.add(new JLabel("姓名："));            jp.add(new JLabel("性别："));            jp.add(new JLabel("年龄："));            jp.add(new JLabel("出院日期："));            jp.add(new JLabel("出院时病情："));            jp.add(jtPid);            jtPid.setEnabled(false);            jp.add(jtPname);            jp.add(jcSex);            jp.add(jtAge);            jp.add(jtOutdate);            jp.add(jtSituation);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel("注意："));            jp.add(jl);            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(new JLabel());            jp.add(jbAlter);            jp.add(jbCancel);            jp.add(new JLabel());            jp.add(new JLabel());            jf.add(jp);            jbAlter.addActionListener(e -> {                int age = Integer.parseInt(jt.getValueAt(row, 3).toString().trim());                if (jtAge.getText().trim().length() != 0) {                    try {                        age = Integer.parseInt(jtAge.getText().trim());                    } catch (Exception e1) {                        JOptionPane.showMessageDialog(jf, "病人年龄只能为整数！\n自动修改为原先的年龄：" + age, "插入错误",                                JOptionPane.ERROR_MESSAGE);                    }                }                String situation = jtSituation.getText().trim();                if (situation.length() == 0) {                    situation = "情况良好";                }                String outdate = jtOutdate.getText().trim();                Pattern p = Pattern.compile("^[1-9][0-9]{3}-[0-9]{2}-[0-9]{2}$", Pattern.CASE_INSENSITIVE);                Pattern p2 = Pattern.compile("^[1-9][0-9]{7}$", Pattern.CASE_INSENSITIVE);                Matcher m = p.matcher(outdate);                Matcher m2 = p2.matcher(outdate);                if (jtPname.getText().trim().length() == 0) {                    jl.setText("病人姓名不能为空！");                    jl.setForeground(Color.RED);                } else if (outdate.length() == 0) {                    jl.setText("住院日期不能为空！");                    jl.setForeground(Color.RED);                } else if (!m.find() && !m2.find()) {                    JOptionPane.showMessageDialog(jf, "出院日期格式出错，正确格式应类似2021-12-12或者20211212", "输入错误",                            JOptionPane.ERROR_MESSAGE);                    jl.setText("住院日期格式出错");                    jl.setForeground(Color.RED);                } else {                    try {                        String update = "update patient_out set " + "pname = '" + jtPname.getText().trim()                                + "',sex = '" + jcSex.getSelectedItem() + "',age = " + age + ",outdate = '"                                + jtOutdate.getText().trim() + "',situation = '" + situation                                + "' where pid = '" + jtSelected[0] + "'";                        PreparedStatement ppst = conn.prepareStatement(update);                        ppst.executeUpdate();                        ppst.close();                        JOptionPane.showMessageDialog(jf, "病人\"" + jtPname.getText().trim() + "\"的出院信息更新成功！", "提示",                                JOptionPane.PLAIN_MESSAGE);                        jf.dispose();                    } catch (Exception er) {                        JOptionPane.showMessageDialog(null, "操作有误！" + er);                    }                }                refreshDataWhenAlter(dataPane, tableName, jPanel, jFrame, attr, parm);            });            jbCancel.addActionListener(e -> jf.dispose());        }    }    public static void add_window(JComboBox<String> type) {        String table = (String) type.getSelectedItem();//        System.out.println(table);        assert table != null;        switch (table) {            case "doctor":                // 插入医生表                addDoctor();                break;            case "patient":                // 插入医生表                addPatient();                break;            case "ward":                // 插入医生表                addWard();                break;            case "patient_in":                // 插入医生表                addPatientIn();                break;            case "patient_out":                // 插入医生表                addPatientOut();                break;            default:                break;        }    }    // 插入医生表    private static void addDoctor() {        // 组件        JFrame jf = new JFrame("请输入医生信息");        JPanel jp = new JPanel();        JTextField jtDid = new JTextField();        JTextField jtName = new JTextField();        JTextField jtText = new JTextField();        JComboBox<String> jcDep = new JComboBox<>();        JComboBox<String> jcJob = new JComboBox<>();        JButton jb = new JButton("确认添加");        JLabel jl = new JLabel("输入框不能有空值");        // 对话框大小        jf.setVisible(true);        jf.setSize(800, 150);        jf.setLocationRelativeTo(null);        jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);        jf.setAlwaysOnTop(true);        jp.setLayout(new GridLayout(4, 5, 5, 5));        // 两个下拉        for (String string : doctorMap.get("job")) {            jcJob.addItem(string);        }        for (String string : doctorMap.get("depart")) {            jcDep.addItem(string);        }        // 顺序添加组件        jp.add(new JLabel("工号："));        jp.add(new JLabel("姓名："));        jp.add(new JLabel("科室："));        jp.add(new JLabel("职务："));        jp.add(new JLabel("备注："));        jp.add(jtDid);        jp.add(jtName);        jp.add(jcDep);        jp.add(jcJob);        jp.add(jtText);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jl);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jb);        jf.add(jp);        jb.addActionListener(e -> addOperationForDoctor(jf, jl, jtDid.getText().trim(), jtName.getText().trim(),                (String) jcDep.getSelectedItem(), (String) jcJob.getSelectedItem(), jtText.getText().trim()));    }    // 确认添加    private static void addOperationForDoctor(JFrame jf, JLabel jl, String did, String name, String depart, String job,                                              String text) {        if (did.length() == 0 || name.length() == 0) {            jl.setText("工号或姓名不能为空");            jl.setForeground(Color.RED);        } else {            try {                String sql = "insert into doctor(did,dname,depart,job,dtext) values(?,?,?,?,?)";                PreparedStatement ps = conn.prepareStatement(sql);                ps.setString(1, did);                ps.setString(2, name);                ps.setString(3, depart);                ps.setString(4, job);                ps.setString(5, text);                ps.executeUpdate();                ps.close();                JOptionPane.showMessageDialog(jf, "医生" + name + "加入成功！", "提示", JOptionPane.PLAIN_MESSAGE);                jf.dispose();            } catch (Exception e) {                JOptionPane.showMessageDialog(jf, "工号为" + did + "已存在！" + e, "插入错误", JOptionPane.ERROR_MESSAGE);            }        }    }    // 插入病人表    private static void addPatient() {        // 组件        JFrame jf = new JFrame("请输入病人信息");        JPanel jp = new JPanel();        JTextField jtPid = new JTextField();        JTextField jtPname = new JTextField();        JTextField jtAge = new JTextField();        JTextField jtSymp = new JTextField();        JTextField jtDiag = new JTextField();        JTextField jtDid = new JTextField();        JTextField jtDname = new JTextField();        JComboBox<String> jcSex = new JComboBox<>();        JComboBox<String> jcStat = new JComboBox<>();        JButton jb = new JButton("确认添加");        JLabel jl = new JLabel("输入框不能有空值");        // 对话框大小        jf.setVisible(true);        jf.setSize(800, 400);        jf.setLocationRelativeTo(null);        jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);        jf.setAlwaysOnTop(true);        jp.setLayout(new GridLayout(11, 2, 5, 5));        // 两个下拉        jcSex.addItem("男");        jcSex.addItem("女");        jcStat.addItem("Normal");        jcStat.addItem("ICU");        // 顺序添加组件        jp.add(new JLabel("病例号："));        jp.add(jtPid);        jp.add(new JLabel("姓名："));        jp.add(jtPname);        jp.add(new JLabel("性别："));        jp.add(jcSex);        jp.add(new JLabel("年龄："));        jp.add(jtAge);        jp.add(new JLabel("病状："));        jp.add(jtSymp);        jp.add(new JLabel("诊断："));        jp.add(jtDiag);        jp.add(new JLabel("诊治医生工号："));        jp.add(jtDid);        jp.add(new JLabel("诊治医生姓名："));        jp.add(jtDname);        jp.add(new JLabel("住院状态："));        jp.add(jcStat);        jp.add(new JLabel());        jp.add(jl);        jp.add(new JLabel());        jp.add(jb);        jf.add(jp);        jb.addActionListener(e -> addOperationForPatient(jf, jl, jtPid, jtPname, jcSex, jtAge, jtSymp, jtDiag, jtDid, jtDname, jcStat));    }    // 确认添加    private static void addOperationForPatient(JFrame jf, JLabel jl, JTextField jtPid, JTextField jtPname,                                               JComboBox<String> jcSex, JTextField jtAge, JTextField jtSymp, JTextField jtDiag, JTextField jtDid,                                               JTextField jtDname, JComboBox<String> jcStat) {        String pid = jtPid.getText().trim();        String pname = jtPname.getText().trim();        String sex = (String) jcSex.getSelectedItem();        int age = 0;        if (jtAge.getText().trim().length() != 0) {            try {                age = Integer.parseInt(jtAge.getText().trim());            } catch (Exception e) {                jl.setText("病人年龄只能是大于0的整数！");                jl.setForeground(Color.RED);            }        }        String symp = jtSymp.getText().trim();        String diag = jtDiag.getText().trim();        String did = jtDid.getText().trim();        String dname = jtDname.getText().trim();        String stat = (String) jcStat.getSelectedItem();        if (pid.length() == 0 || pname.length() == 0) {            jl.setText("病人的病号和姓名不能为空");            jl.setForeground(Color.RED);        } else if (did.length() == 0 || dname.length() == 0) {            jl.setText("诊治医生的工号和姓名不能为空");            jl.setForeground(Color.RED);        } else if (age < 0) {            jl.setText("病人的年龄不能小于0或为空");            jl.setForeground(Color.RED);        } else if (symp.length() == 0 || diag.length() == 0) {            jl.setText("病人的病情和诊断不应为空");            jl.setForeground(Color.RED);        } else {            try {                String sql = "insert into patient(pid,pname,sex,age,symp,diag,did,dname,stat) values(?,?,?,?,?,?,?,?,?)";                PreparedStatement ps = conn.prepareStatement(sql);                ps.setString(1, pid);                ps.setString(2, pname);                ps.setString(3, sex);                ps.setInt(4, age);                ps.setString(5, symp);                ps.setString(6, diag);                ps.setString(7, did);                ps.setString(8, dname);                ps.setString(9, stat);                ps.executeUpdate();                ps.close();                JOptionPane.showMessageDialog(jf, "病人" + pname + "(" + pid + ")加入成功！", "提示", JOptionPane.PLAIN_MESSAGE);                jf.dispose();            } catch (Exception e) {                JOptionPane.showMessageDialog(jf, "病人" + pid + "已存在 或 医生" + did + "不存在", "插入错误",                        JOptionPane.ERROR_MESSAGE);            }        }    }    // 插入病房表    private static void addWard() {        // 组件        JFrame jf = new JFrame("请输入病房信息");        JPanel jp = new JPanel();        JTextField jtWbid = new JTextField();        JTextField jtText = new JTextField();        JComboBox<String> jcWid = new JComboBox<>();        JComboBox<String> jcWstat = new JComboBox<>();        JComboBox<String> jcWclass = new JComboBox<>();        JButton jb = new JButton("确认添加");        JLabel jl = new JLabel("输入框不能有空值");        // 对话框大小        jf.setVisible(true);        jf.setSize(800, 150);        jf.setLocationRelativeTo(null);        jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);        jf.setAlwaysOnTop(true);        jp.setLayout(new GridLayout(4, 5, 5, 5));        // 两个下拉        for (int wid : wardMap.get("wid")) {            jcWid.addItem(String.valueOf(wid));        }        jcWstat.addItem("空");        jcWstat.addItem("非空");        jcWclass.addItem("ICU");        jcWclass.addItem("Normal");        // 顺序添加组件        jp.add(new JLabel("病房号："));        jp.add(new JLabel("病床号："));        jp.add(new JLabel("床位状态："));        jp.add(new JLabel("床位属性："));        jp.add(new JLabel("备注："));        jp.add(jcWid);        jp.add(jtWbid);        jp.add(jcWstat);        jp.add(jcWclass);        jp.add(jtText);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jl);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jb);        jf.add(jp);        jb.addActionListener(e -> addOperationForWard(jf, jl, jcWid, jtWbid, jcWstat, jcWclass, jtText));    }    // 确认添加    private static void addOperationForWard(JFrame jf, JLabel jl, JComboBox<String> jcWid, JTextField jtWbid,                                            JComboBox<String> jcWstat, JComboBox<String> jcWclass, JTextField jtText) {        if (jtWbid.getText().trim().length() == 0) {            jl.setText("床位号不能为空");            jl.setForeground(Color.RED);        } else {            int wbid = 0;            try {                try {                    wbid = Integer.parseInt(jtWbid.getText().trim());                } catch (Exception e) {                    jl.setText("床位号格式必须是整数");                    jl.setForeground(Color.RED);                    return;                }                System.out.println("1");                String sql = "insert into ward(wid,wbid,wstat,wclass,wtext) values(?,?,?,?,?)";                PreparedStatement ps = conn.prepareStatement(sql);                ps.setInt(1, Integer.parseInt((String) Objects.requireNonNull(jcWid.getSelectedItem())));                ps.setInt(2, wbid);                ps.setString(3, (String) jcWstat.getSelectedItem());                ps.setString(4, (String) jcWclass.getSelectedItem());                ps.setString(5, jtText.getText().trim());                System.out.println("2");                ps.executeUpdate();                System.out.println("3");                ps.close();                JOptionPane.showMessageDialog(jf, "床位" + jcWid.getSelectedItem() + wbid + "加入成功！", "提示",                        JOptionPane.PLAIN_MESSAGE);                jf.dispose();            } catch (Exception e) {                JOptionPane.showMessageDialog(jf, "床位" + jcWid.getSelectedItem() + wbid + "已存在！", "插入错误",                        JOptionPane.ERROR_MESSAGE);            }        }    }    // 插入住院表    private static void addPatientIn() {        // 组件        JFrame jf = new JFrame("请输入病人入住信息");        JPanel jp = new JPanel();        JTextField jtPid = new JTextField();        JTextField jtPname = new JTextField();        JTextField jtWbid = new JTextField();        JTextField jtSpantime = new JTextField();        JTextField jtStartDate = new JTextField();        JComboBox<String> jcWid = new JComboBox<>();        JButton jb = new JButton("确认添加");        JLabel jl = new JLabel("输入框不能有空值");        JLabel jl2 = new JLabel("注意：");        // 对话框大小        jf.setVisible(true);        jf.setSize(800, 150);        jf.setLocationRelativeTo(null);        jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);        jf.setAlwaysOnTop(true);        jp.setLayout(new GridLayout(4, 6, 5, 5));        // 下拉        for (int wid : wardMap.get("wid")) {            jcWid.addItem(String.valueOf(wid));        }        // 顺序添加组件        jp.add(new JLabel("病例号："));        jp.add(new JLabel("姓名："));        jp.add(new JLabel("病房号："));        jp.add(new JLabel("病床号："));        jp.add(new JLabel("持续时间/天："));        jp.add(new JLabel("入住日期："));        jp.add(jtPid);        jp.add(jtPname);        jp.add(jcWid);        jp.add(jtWbid);        jp.add(jtSpantime);        jp.add(jtStartDate);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jl2);        jp.add(jl);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jb);        jf.add(jp);        jb.addActionListener(e -> addOperationForPatientIn(jf, jl, jl2, jtPid, jtPname, jcWid, jtWbid, jtSpantime, jtStartDate));    }    // 确认添加    private static void addOperationForPatientIn(JFrame jf, JLabel jl, JLabel jl2, JTextField jtPid, JTextField jtPname,                                                 JComboBox<String> jcWid, JTextField jtWbid, JTextField jtSpantime, JTextField jtStartDate) {        String pid = jtPid.getText().trim();        String pname = jtPname.getText().trim();        int wid = Integer.parseInt((String) Objects.requireNonNull(jcWid.getSelectedItem()));        int wbid;        if (jtWbid.getText().trim().length() == 0) {            jl.setText("入住病床号不能为空！");            jl.setForeground(Color.RED);            jl2.setText("警告：");            jl2.setForeground(Color.RED);            return;        } else {            try {                wbid = Integer.parseInt(jtWbid.getText().trim());            } catch (Exception e) {                jl.setText("病床号只能为整数！");                jl.setForeground(Color.RED);                jl2.setText("警告：");                jl2.setForeground(Color.RED);                return;            }        }        int spantime = 0;        if (jtSpantime.getText().trim().length() != 0) {            try {                spantime = Integer.parseInt(jtSpantime.getText().trim());            } catch (Exception e) {                jl.setText("住院时长只能为整数！");                jl.setForeground(Color.RED);                jl2.setText("警告：");                jl2.setForeground(Color.RED);                return;            }        }        String startdate = jtStartDate.getText().trim();        Pattern p = Pattern.compile("^[1-9][0-9]{7}$", Pattern.CASE_INSENSITIVE);        Matcher m = p.matcher(startdate);        if (pid.length() == 0) {            jl.setText("病例号不能为空！");            jl.setForeground(Color.RED);            jl2.setText("警告：");            jl2.setForeground(Color.RED);        } else if (pname.length() == 0) {            jl.setText("病人姓名不能为空！");            jl.setForeground(Color.RED);            jl2.setText("警告：");            jl2.setForeground(Color.RED);        } else if (startdate.length() == 0) {            jl.setText("住院日期不能为空！");            jl.setForeground(Color.RED);            jl2.setText("警告：");            jl2.setForeground(Color.RED);        } else if (!m.find()) {            JOptionPane.showMessageDialog(jf, "入住日期格式出错，正确格式应类似20211212", "输入错误", JOptionPane.ERROR_MESSAGE);            jl.setText("住院日期格式出错");            jl.setForeground(Color.RED);            jl2.setText("警告：");            jl2.setForeground(Color.RED);        } else {            try {                System.out.println("1");                String sql = "insert into patient_in(pid,pname,wid,wbid,spantime,startdate) values(?,?,?,?,?,?)";                PreparedStatement ps = conn.prepareStatement(sql);                ps.setString(1, pid);                ps.setString(2, pname);                ps.setInt(3, wid);                ps.setInt(4, wbid);                ps.setInt(5, spantime);                ps.setString(6, startdate);                ps.executeUpdate();                ps.close();                JOptionPane.showMessageDialog(jf,                        "病人" + pname + "(" + pid + ")加入病床" + wid + wbid + "成功！", "提示",                        JOptionPane.PLAIN_MESSAGE);                jf.dispose();            } catch (Exception e) {                JOptionPane.showMessageDialog(jf,                        "病人" + pid + "已存在 或 床位" + wid + wbid + "已满/不存在", "插入错误",                        JOptionPane.ERROR_MESSAGE);            }        }    }    // 插入出院表    private static void addPatientOut() {        // 组件        JFrame jf = new JFrame("请输入病人出院信息");        JPanel jp = new JPanel(new GridLayout(4, 6, 5, 5));        JTextField jtPid = new JTextField();        JTextField jtPname = new JTextField();        JTextField jtAge = new JTextField();        JTextField jtOutDate = new JTextField();        JTextField jtSituation = new JTextField();        JComboBox<String> jcSex = new JComboBox<>();        JButton jb = new JButton("确认添加");        JLabel jl = new JLabel("输入框不能有空值");        JLabel jl2 = new JLabel("提示：");        // 对话框大小        jf.setVisible(true);        jf.setSize(800, 150);        jf.setLocationRelativeTo(null);        jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);        jf.setAlwaysOnTop(true);//        jp.setLayout();        // 下拉        jcSex.addItem("男");        jcSex.addItem("女");        // 顺序添加组件        jp.add(new JLabel("病例号："));        jp.add(new JLabel("姓名："));        jp.add(new JLabel("性别："));        jp.add(new JLabel("年龄："));        jp.add(new JLabel("出院日期："));        jp.add(new JLabel("出院时病情："));        jp.add(jtPid);        jp.add(jtPname);        jp.add(jcSex);        jp.add(jtAge);        jp.add(jtOutDate);        jp.add(jtSituation);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jl2);        jp.add(jl);        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(new JLabel());        jp.add(jb);        jf.add(jp);        jb.addActionListener(e ->                addOperationForPatientOut(jf, jl, jl2, jtPid, jtPname, jcSex, jtAge, jtOutDate, jtSituation));    }    private static void addOperationForPatientOut(JFrame jf, JLabel jl, JLabel jl2, JTextField jtPid,                                                  JTextField jtPname, JComboBox<String> jcSex, JTextField jtAge, JTextField jtOutdate,                                                  JTextField jtSituaion) {        String pid = jtPid.getText().trim();        String pname = jtPname.getText().trim();        String sex = (String) jcSex.getSelectedItem();        int age;        String outdate = jtOutdate.getText().trim();        String situation = jtSituaion.getText().trim();        if (jtAge.getText().trim().length() == 0) {            jl.setText("年龄不能为空！");            jl.setForeground(Color.RED);            jl2.setText("注意：");            jl2.setForeground(Color.RED);            return;        } else {            try {                age = Integer.parseInt(jtAge.getText().trim());            } catch (Exception e) {                jl.setText("年龄只能为整数！");                jl.setForeground(Color.RED);                jl2.setText("注意：");                jl2.setForeground(Color.RED);                return;            }        }        if (situation.length() == 0) {            situation = "情况良好";        }        Pattern p = Pattern.compile("^[1-9][0-9]{7}$", Pattern.CASE_INSENSITIVE);        Matcher m = p.matcher(outdate);        if (pid.length() == 0) {            jl.setText("病例号不能为空！");            jl.setForeground(Color.RED);            jl2.setText("注意：");            jl2.setForeground(Color.RED);        } else if (pname.length() == 0) {            jl.setText("病人姓名不能为空！");            jl.setForeground(Color.RED);            jl2.setText("注意：");            jl2.setForeground(Color.RED);        } else if (outdate.length() == 0) {            jl.setText("住院日期不能为空！");            jl.setForeground(Color.RED);            jl2.setText("注意：");            jl2.setForeground(Color.RED);        } else if (!m.find()) {            JOptionPane.showMessageDialog(jf, "出院日期格式出错，正确格式应类似20211212", "输入错误", JOptionPane.ERROR_MESSAGE);            jl.setText("住院日期格式出错");            jl.setForeground(Color.RED);            jl2.setText("注意：");            jl2.setForeground(Color.RED);        } else {            try {                String sql = "insert into patient_out(pid,pname,sex,age,outdate,situation) values(?,?,?,?,?,?)";                PreparedStatement ps = conn.prepareStatement(sql);                ps.setString(1, pid);                ps.setString(2, pname);                ps.setString(3, sex);                ps.setInt(4, age);                ps.setString(5, outdate);                ps.setString(6, situation);                ps.executeUpdate();                ps.close();                JOptionPane.showMessageDialog(jf, "成功添加如下病人信息：" + pid + ",\"" + pname + "\"," + sex + "," + age                        + "出院日期是" + outdate + ",出院时病情为\"" + situation + "\"", "提示", JOptionPane.PLAIN_MESSAGE);                jf.dispose();            } catch (Exception e) {                JOptionPane.showMessageDialog(jf, "病人" + pid + "已存在", "插入错误", JOptionPane.ERROR_MESSAGE);            }        }    }    private static JTable getdata(String tablename) {        try {            JTable datatable = new JTable();            String select = "select * from " + tablename;            func1(select,datatable);            return datatable;        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, "无数据记录");            return new JTable();        }    }    private static void display(JComboBox<String> type, JPanel jp, JFrame jframe) {        JScrollPane data = new JScrollPane();        JLabel tip = new JLabel("请选择一行");        JButton button = new JButton("删除");        tip.setBounds(500, 0, 200, 25);        button.setBounds(800, 0, 100, 25);        data.setBounds(200, 25, 700, 575);        String table_name = (String) type.getSelectedItem();        JTable jt = getdata(table_name);        data.setViewportView(jt);        data.setBorder(BorderFactory.createLineBorder(new Color(94, 152, 255), 2));        jp.add(button);        jp.add(tip);        jp.add(data);        button.addActionListener(e -> {            if (jt.getSelectedRow() == -1) {                JOptionPane.showMessageDialog(null, "请先选中一行后再点击删除按钮");            } else {                JFrame jf1 = new JFrame();                JPanel jp1 = new JPanel();                jp1.setLayout(null);                jp1.setBounds(0, 0, 300, 200);                JButton y = new JButton("确认");                JButton n = new JButton("取消");                JLabel label = new JLabel("请确认是否" + "删除");                label.setBounds(100, 50, 100, 30);                y.setBounds(30, 100, 80, 30);                n.setBounds(180, 100, 80, 30);                jp1.add(label);                jp1.add(y);                jp1.add(n);                jf1.add(jp1);                jf1.setVisible(true);                jf1.setSize(300, 200);                jf1.setLocationRelativeTo(null);                jf1.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);                n.addActionListener(e1 -> jf1.dispose());                y.addActionListener(e1 -> {                    jf1.dispose();                    sql_del(table_name, jt.getSelectedRow(), jt);                    jp.removeAll();                    jp.repaint();                    jp.revalidate();                    display(type, jp, jframe);                    jframe.repaint();                });            }        });    }    private static void sql_del(String table_name, int row, JTable jt) {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < jt.getColumnCount(); i++) {            if (i != 0) {                sb.append(" and ");            }            sb.append(jt.getColumnName(i)).append("='").append(jt.getValueAt(row, i++)).append("'");        }        System.out.println(sb);        String delete = "delete from " + table_name + " where " + sb.toString();        try {            Statement sm = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);            sm.execute(delete);        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, e.getMessage());        }    }    public static void select_window(JComboBox<String> type, JPanel jp, JFrame jf) {        jp.removeAll();        jp.repaint();        jp.revalidate();        String table_name = (String) type.getSelectedItem();        JScrollPane data = new JScrollPane();        JButton select = new JButton("查询");        JButton empty = new JButton("重置");        JTextField parm = new JTextField();        JComboBox<String> attr = new JComboBox<>();        for (String s : table_attr.get(table_name)) {            attr.addItem(s);        }        attr.setBounds(200, 0, 100, 25);        parm.setBounds(300, 0, 450, 25);        select.setBounds(750, 0, 75, 25);        empty.setBounds(825, 0, 75, 25);        data.setBounds(200, 25, 700, 575);        data.setViewportView(getdata(table_name));        data.setBorder(BorderFactory.createLineBorder(new Color(94, 152, 255), 2));        jp.add(empty);        jp.add(attr);        jp.add(parm);        jp.add(select);        jp.add(data);        parm.addKeyListener(new KeyAdapter() {            @Override            public void keyPressed(KeyEvent e) {                if(e.getKeyCode() == KeyEvent.VK_ENTER){                    data.setViewportView(select_according_attr(table_name, (String) (attr.getSelectedItem()), parm.getText()));                    jp.repaint();                    jf.repaint();                }            }        });        select.addActionListener(e -> {            data.setViewportView(select_according_attr(table_name, (String) (attr.getSelectedItem()), parm.getText()));            jp.repaint();            jf.repaint();        });        empty.addActionListener(e -> {            data.setViewportView(getdata(table_name));            jp.repaint();            jf.repaint();        });    }    private static void func1(String sql,JTable datatable) throws SQLException {        Statement sm = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);        ResultSet rs = sm.executeQuery(sql);        ResultSetMetaData rsmd = rs.getMetaData();        rs.last();        int rowCount = rs.getRow();        int columnCount = rsmd.getColumnCount();        Object[][] tableData = new Object[rowCount][columnCount];        Object[] tableHead = new Object[columnCount];        for (int i = 0; i < columnCount; i++) {            tableHead[i] = rsmd.getColumnName(i+1);        }        for (int i = 0; i < rowCount; i++) {            for (int j = 0; j < columnCount; j++) {                tableData[i][j] = 0;            }        }        int row = 0;        rs.first();        do {            if (rowCount == 0) {                break;            }            for (int column = 0; column < columnCount; column++) {                tableData[row][column] = rs.getString(column + 1);            }            row++;        } while (rs.next());        DefaultTableModel tableModel = new DefaultTableModel(tableData, tableHead);        datatable.setModel(tableModel);    }    private static JTable select_according_attr(String tableName, String attr, String value) {        String select = "select * from " + tableName + " where " + attr + " like '%" + value + "%'";        JTable datatable = new JTable();        try {            func1(select,datatable);        } catch (SQLException e) {            e.printStackTrace();        }        return datatable;    }    private static void help_window(JPanel jp,String key) {        JTextArea jta = new JTextArea();        jta.setEditable(false);        jta.setLineWrap(true);        jta.setBackground(new Color(238, 238, 238));        jta.setFont(new Font("微软雅黑", Font.PLAIN, 12));        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(text.get(key));        String text = inputStreamToString(is);        jta.setText(text);        JScrollPane jsp = new JScrollPane(jta);        jsp.setBounds(200, 0, 700, 560);        jp.add(jsp);    }    private static String inputStreamToString(InputStream inputStream) {        StringBuffer buffer = new StringBuffer();        InputStreamReader inputStreamReader;        try {            inputStreamReader = new InputStreamReader(inputStream, "GBK");            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);            String str;            while ((str = bufferedReader.readLine()) != null) {                buffer.append(str);                buffer.append("\n");            }            // 释放资源            bufferedReader.close();            inputStreamReader.close();            inputStream.close();        } catch (Exception e) {            e.printStackTrace();        }        return buffer.toString();    }    public static boolean LoginMatch(String name, String psd) {        String url = "jdbc:sqlserver://127.0.0.1:1433;DataBaseName = Hospital";        try {            String s;            if (name.length() <= 6) {                s = "管理员";            } else {                s = "医生";            }            conn = DriverManager.getConnection(url, name, psd);            JOptionPane.showMessageDialog(null, "欢迎" + s + "―――" + name + "使用！\n");        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, "用户名或密码错误");            return false;        }        return true;    }    public static void main(String... args) {        Main_Menu();    }}